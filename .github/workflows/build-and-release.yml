name: "Build and release"
on:
  push:
    tags:
      - '*'

jobs:
  build_release_non_linux:
    name: ${{ matrix.os.name }}
    runs-on: ${{ matrix.os.runs-on }}
    strategy:
      matrix:
        os:
          - name: Windows
            runs-on: windows-latest
            python_platform: win32
          - name: macOS
            runs-on: macos-latest
            python_platform: darwin

    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: non macOS build
        run: cargo build --release
        if: matrix.os.name == 'Windows'
      - name: macOS build
        run: |
          brew install unixodbc
          prefix=$(brew --prefix unixodbc)
          export LDFLAGS="-L${prefix}/lib"
          export CPPFLAGS="-I${prefix}/include"
          mkdir -vp ~/{lib,include}
          ln -vs ${prefix}/lib/* ~/lib/
          ln -vs ${prefix}/include/* ~/include/
          cargo build --release
        if: matrix.os.name == 'macOS'
      - name: build artifact rename
        run: mv "target/release/odbc-cli" "target/release/odbc-cli-$RUNNER_OS-$RUNNER_ARCH"
        if: matrix.os.name != 'Windows'
      - name: non-Windows release
        run: gh release upload "$GITHUB_REF_NAME" "target/release/odbc-cli-$RUNNER_OS-$RUNNER_ARCH"
        env:
          GH_TOKEN: ${{ github.token }}
        if: matrix.os.name != 'Windows'
      - name: Windows release
        run: gh release upload %GITHUB_REF_NAME% "%GITHUB_WORKSPACE%\target\release\odbc-cli.exe"
        env:
          GH_TOKEN: ${{ github.token }}
        shell: cmd
        if: matrix.os.name == 'Windows'
  linux_multiarch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [ nightly ]
        target: [ x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl ]
    #       target: [aarch64-unknown-linux-gnu, armv7-unknown-linux-gnueabihf, i686-unknown-linux-gnu, i686-unknown-linux-musl, mips-unknown-linux-gnu, mips64-unknown-linux-gnuabi64, mips64el-unknown-linux-gnuabi64, mipsel-unknown-linux-gnu, powerpc-unknown-linux-gnu, powerpc64-unknown-linux-gnu, powerpc64le-unknown-linux-gnu, arm-unknown-linux-gnueabi, x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]
    steps:
      - uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: musl-tools
          version: 1.2.4
        # if: target contains "musl"
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
      - name: "[ ${{ matrix.target }} ] Build and release"
        run: |
          # cargo install cross --git https://github.com/cross-rs/cross
          # cross build --target $TARGET --release 
          cargo build --target $TARGET --release
          ls target/release
          gh release upload "$GITHUB_REF_NAME" "target/release/odbc-cli-$TARGET"
        env:
          TARGET: ${{ matrix.target }}
